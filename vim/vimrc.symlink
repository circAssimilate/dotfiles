set nocompatible
set ttyfast
set t_ut=

set modeline
set modelines=5
set encoding=utf8 nobomb

let mapleader = ",,"
command! -nargs=* -complete=help Ho help <args>|only

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
call plug#begin()
Plug 'junegunn/vim-plug'
Plug 'zanglg/nova.vim'
Plug 'rakr/vim-one'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-fugitive'
Plug 'ekalinin/Dockerfile.vim'
Plug 'vimoutliner/vimoutliner'
Plug 'leafgarland/typescript-vim'
Plug 'chrisbra/csv.vim', { 'for': 'csv' }
Plug 'jacoborus/tender.vim'
Plug 'romgrk/pp.vim'
call plug#end()

"""" NEDTREE SETTINGS
  " Open a NERDTree automatically when vim starts up if no files were specified
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

  " Open NERDTree automatically when vim starts up on opening a directory
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

  " Close vim if the only window left open is a NERDTree
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

  " Change default arrows
  let g:NERDTreeDirArrowExpandable = '▸'
  let g:NERDTreeDirArrowCollapsible = '▾'

  " Tab Ctrl+l,h,i
  map  <C-l> :tabn<CR>
  map  <C-h> :tabp<CR>
  map  <C-i> :tabnew<CR>

  map <C-n> :NERDTreeToggle<CR>         " Open NERDTree with Ctrl+j

  " Provide easy way to refresh NerdTree location
  nnoremap <C-o> :NERDTree %<CR>

  let NERDTreeIgnore = ['\.pyc$']  " Should be covered by .gitignore

"""" GENERAL SETTINGS
  if executable('ag')
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0
    command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  endif


  " tabs
  set tabstop=2
  set softtabstop=2
  set shiftwidth=2
  set expandtab
  set smarttab

  set splitbelow
  set splitright
  set helpheight=30
  set nowrap
  set ignorecase
  set smartcase
  set gdefault
  set mouse=a
  set mousehide
  set mousefocus
  if has('mouse_sgr')
      set ttymouse=sgr
  endif
  set wildmenu
  set sidescroll=1
  set nohidden
  filetype plugin indent on   " Automatically detect file types.
  syntax on                   " Syntax highlighting
  set spell                   " Spell checking on
  set mouse=a                 " Automatically enable mouse usage
  set mousehide               " Hide the mouse cursor while typing
  set mousefocus              " ?
  if has('mouse_sgr')         " ?
    set ttymouse=sgr
  endif
  set nobackup                " ?
  set nowritebackup           " ?
  set noswapfile              " ?
  set clipboard=unnamed       " For global copy paste
  scriptencoding utf-8
  autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif " ? Always switch to the current file directory

  set shortmess+=filmnrxoOtT          " Abbrev. of messages (avoids 'hit enter') ?
  set virtualedit=onemore             " Allow for cursor beyond last character
  set history=1000                    " Store a ton of history (default is 20)
  set hidden                          " Allow buffer switching without saving
  set nocompatible "?
  set ttyfast "?
  set t_ut= "?
  set modeline
  set modelines=5
  set encoding=utf8 nobomb

  set autoindent                  " Indent at the same level of the previous line
  set matchpairs+=<:>             " Match, to be used with %
  set comments=sl:/*,mb:*,elx:*/  " auto format comment blocks
  set formatoptions+=t            " Set the necessary format option to prevent line wrapping

  set tabpagemax=15               " Only show 15 tabs
  set showmode                    " Display the current mode

  if has('cmdline_info')
    set ruler                   " Show the ruler
    set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
    set showcmd                 " Show partial commands in status line and
  endif

  if has('statusline')
    set laststatus=2

    " Broken down into easily includeable segments
    set statusline=%<%f\                     " Filename
    set statusline+=%w%h%m%r                 " Options
    set statusline+=%{fugitive#statusline()} " Git Hotness
    set statusline+=\ [%{&ff}/%Y]            " Filetype
    set statusline+=\ [%{getcwd()}]          " Current dir
    set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
  endif

  set backspace=indent,eol,start  " Backspace for dummies
  set linespace=0                 " No extra spaces between rows
  set nu                          " Line numbers on
  set showmatch                   " Show matching brackets/parenthesis
  set incsearch                   " Find as you type search
  set hlsearch                    " Highlight search terms
  set winminheight=0              " Windows can be 0 line high
  set ignorecase                  " Case insensitive search
  set smartcase                   " Case sensitive when uc present
  set wildmenu                    " Show list instead of just completing
  set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
  set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
  set scrolljump=8                " Lines to scroll when cursor leaves screen
  set scrolloff=3                 " Minimum lines to keep above and below cursor
  set foldenable                  " Auto fold code
  set list

  " List chars
  set listchars=""          " Reset the listchars
  set listchars=tab:\ \     " a tab should display as "  ", trailing whitespace as "."
  set listchars+=trail:.    " show trailing spaces as dots
  set listchars+=extends:>  " The character to show in the last column when wrap is
                            " off and the line continues beyond the right of the screen
  set listchars+=precedes:< " The character to show in the last column when wrap is
                            " off and the line continues beyond the right of the screen


"""" KEYMAPPINGS
  " Clear highlighting on escape in normal mode
  nnoremap <esc> :noh<return><esc>
  nnoremap <esc>^[ <esc>^[
  noremap <Leader>y "*y"
  noremap <Leader>p "*p"
  noremap <Leader>Y "*Y"
  noremap <Leader>P "+P"


"""" UI SETTINGS
  " If you have vim >=8.0 or Neovim >= 0.1.5
  if (has("termguicolors"))
   set termguicolors
  endif

  " For Neovim 0.1.3 and 0.1.4
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1

  " Theme
  syntax enable
  colorscheme tender

  " set lighline theme inside lightline config
  let g:lightline = { 'colorscheme': 'tender' }

  " set airline theme
  let g:airline_theme = 'tender'

  " Fix for MacVim
  let macvim_skip_colorscheme=1

  hi Visual guifg=#040404 ctermfg=NONE guibg=#EDEDED ctermbg=0 gui=NONE cterm=NONE
  hi VisualNOS guifg=#040404 ctermfg=NONE guibg=#EDEDED ctermbg=0 gui=NONE cterm=NONE
